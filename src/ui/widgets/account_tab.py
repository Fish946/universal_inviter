from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, 
                           QPushButton, QLabel, QLineEdit, QTextEdit,
                           QGridLayout, QMessageBox, QDialog)
from PyQt6.QtCore import Qt, pyqtSignal
import qasync

from core.di.container import Container
from ui.dialogs.auth_dialogs import CodeVerificationDialog, TwoFactorAuthDialog
from ui.styles import Styles, Colors

class AccountTab(QWidget):
    account_added = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    
    def __init__(self, container: Container):
        super().__init__()
        self.container = container
        self.logger = container.logger
        self.auth_service = container.auth_service
        self.account_manager = container.account_manager
        self.init_ui()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏
        qasync.create_task(self.update_accounts_list())

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        layout = QVBoxLayout(self)

        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        form_group = QWidget()
        form_layout = QGridLayout(form_group)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.phone_input = QLineEdit()
        self.phone_input.setPlaceholderText("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7...)")
        self.phone_input.setStyleSheet(Styles.INPUT)

        self.api_id_input = QLineEdit()
        self.api_id_input.setPlaceholderText("API ID")
        self.api_id_input.setStyleSheet(Styles.INPUT)

        self.api_hash_input = QLineEdit()
        self.api_hash_input.setPlaceholderText("API Hash")
        self.api_hash_input.setStyleSheet(Styles.INPUT)

        # –ö–Ω–æ–ø–∫–∏
        add_account_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        add_account_btn.setStyleSheet(Styles.BUTTON)
        add_account_btn.clicked.connect(self.add_account)

        check_accounts_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
        check_accounts_btn.setStyleSheet(Styles.BUTTON)
        check_accounts_btn.clicked.connect(self.check_all_accounts)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º—É
        form_layout.addWidget(QLabel("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"), 0, 0)
        form_layout.addWidget(self.phone_input, 0, 1)
        form_layout.addWidget(QLabel("API ID:"), 1, 0)
        form_layout.addWidget(self.api_id_input, 1, 1)
        form_layout.addWidget(QLabel("API Hash:"), 2, 0)
        form_layout.addWidget(self.api_hash_input, 2, 1)
        form_layout.addWidget(add_account_btn, 3, 0, 1, 2)
        form_layout.addWidget(check_accounts_btn, 4, 0, 1, 2)

        # –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.accounts_list = QTextEdit()
        self.accounts_list.setReadOnly(True)
        self.accounts_list.setStyleSheet(Styles.LOG_VIEW)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        layout.addWidget(form_group)
        layout.addWidget(QLabel("–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:"))
        layout.addWidget(self.accounts_list)

    @qasync.asyncSlot()
    async def add_account(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            phone = self.phone_input.text().strip()
            api_id = self.api_id_input.text().strip()
            api_hash = self.api_hash_input.text().strip()

            if not all([phone, api_id, api_hash]):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return

            self.logger.info(f"–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            result = await self.auth_service.start_auth(phone, api_id, api_hash)
            
            if result.get('need_code'):
                code = self.show_code_dialog()
                if code:
                    result = await self.auth_service.verify_code(code)
                    if result.get('need_2fa'):
                        password = self.show_2fa_dialog()
                        if password:
                            result = await self.auth_service.verify_2fa(password)
            
            if result.get('success'):
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
                self.clear_inputs()
                await self.update_accounts_list()
                self.account_added.emit()  # –û–ø–æ–≤–µ—â–∞–µ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
            else:
                error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {error_msg}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)

        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {error_msg}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)
            await self.auth_service.reset_auth()

    @qasync.asyncSlot()
    async def check_all_accounts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            self.log_message("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...", Colors.INFO)
            results = await self.account_manager.check_all_accounts()
            
            if not results:
                self.log_message("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", Colors.WARNING)
                return
                
            for phone, status in results.items():
                if status.get("error"):
                    self.log_message(f"–ê–∫–∫–∞—É–Ω—Ç {phone}: {status['error']}", Colors.ERROR)
                else:
                    self.log_message(
                        f"–ê–∫–∫–∞—É–Ω—Ç {phone}: –ê–∫—Ç–∏–≤–µ–Ω, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                        Colors.SUCCESS
                    )

            await self.update_accounts_list()

        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {error_msg}")
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {error_msg}", Colors.ERROR)

    async def update_accounts_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            accounts = self.account_manager.db.get_all_accounts()
            
            html_content = []
            for account in accounts:
                status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if account.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                restrictions = account.restrictions if account.restrictions else "–Ω–µ—Ç"
                
                account_html = (
                    f'<div style="margin-bottom: 10px;">'
                    f'<span style="color: #2196F3;">üì± {account.phone}</span> | {status}<br>'
                    f'<span style="color: #666;">API ID:</span> {account.api_id}<br>'
                    f'<span style="color: #666;">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</span> {restrictions}<br>'
                    f'{"‚îÄ" * 40}'
                    f'</div>'
                )
                html_content.append(account_html)
            
            if not accounts:
                html_content = ['<span style="color: #FFA500;">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</span>']
            
            self.accounts_list.clear()
            self.accounts_list.setHtml(''.join(html_content))
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}"
            self.logger.error(error_msg)
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)

    def show_code_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        dialog = CodeVerificationDialog(self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            return dialog.get_code()
        return None

    def show_2fa_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        dialog = TwoFactorAuthDialog(self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            return dialog.get_password()
        return None

    def clear_inputs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""
        self.phone_input.clear()
        self.api_id_input.clear()
        self.api_hash_input.clear()

    def log_message(self, message: str, color: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        current_html = self.accounts_list.toHtml()
        new_message = f'<div style="color: {color};">{message}</div>'
        self.accounts_list.setHtml(current_html + new_message) 